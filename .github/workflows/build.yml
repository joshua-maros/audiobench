name: Build All Artifacts

on:
  push:
    branches: [ release ]
  pull_request:
    branches: [ beta, release ]

env:
  CARGO_TERM_COLOR: always

jobs:
  check-version:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.base_ref == 'release'
    steps:
    - uses: actions/checkout@v2
      with:
        lfs: 'true' 
        persist-credentials: 'false'
    - name: Check version numbers
      run: ./build.py check_version

  build:
    strategy:
      matrix:
        os: ['ubuntu-latest', 'windows-latest', 'macOS-latest']
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
      with:
        lfs: 'true' 
    - uses: actions/setup-python@v2
      with:
        python-version: '3.7'
    - name: Cache LLVM install (Windows only)
      if: ${{ matrix.os == 'windows-latest' }}
      id: cache-llvm
      uses: actions/cache@v2
      with:
        path: ${{ runner.temp }}/llvm
        key: llvm
    - name: Install LLVM/Clang (Windows only)
      if: ${{ matrix.os == 'windows-latest' }}
      uses: KyleMayes/install-llvm-action@v1
      with:
        version: 10.0
        directory: ${{ runner.temp }}/llvm
        cached: ${{ steps.cache-llvm.outputs.cache-hit }}
    - name: Build on Windows
      if: ${{ matrix.os == 'windows-latest' }}
      run: |
        choco install nsis
        python build.py installer --release --github-runner
      env:
        LIBCLANG_PATH: ${{ runner.temp }}/llvm/lib
    - name: Build on MacOS
      if: ${{ matrix.os == 'macOS-latest' }}
      run: |
        export OPENSSL_ROOT_DIR=$(brew --prefix openssl)
        export OPENSSL_LIB_DIR=$(brew --prefix openssl)"/lib"
        export OPENSSL_INCLUDE_DIR=$(brew --prefix openssl)"/include"
        python build.py installer --release --github-runner
    - name: Build on Linux
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        sudo apt update
        sudo apt -y install libxrandr-dev libxinerama-dev libxcursor-dev libasound-dev extra-cmake-modules libxcb-shape0-dev libxcb-xfixes0-dev
        python build.py installer --release --github-runner
    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: artifacts-installer-${{ matrix.os }}
        path: artifacts/installer/
  
  build-book:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        lfs: 'true' 
    - name: Install MDBook
      run: |
        cargo install mdbook --vers "^0.4.0"
    - name: Build Book
      run: |
        mdbook build docs/book
    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: book-html
        path: docs/book/book/
    
  deploy-site:
    needs: [build, build-book]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
    - uses: actions/checkout@v2
      with:
        lfs: 'true' 
        persist-credentials: 'false'
    - name: Gather Artifacts
      run: |
        mkdir -p website/
        mkdir -p website/bin/
        mkdir -p website/book/
        cp -r docs/website/src/* website/
    - uses: actions/download-artifact@v2
      with:
        name: artifacts-bin-windows-latest
        path: website/bin/
    - uses: actions/download-artifact@v2
      with:
        name: artifacts-bin-macOS-latest
        path: website/bin/
    - uses: actions/download-artifact@v2
      with:
        name: artifacts-bin-ubuntu-latest
        path: website/bin/
    - uses: actions/download-artifact@v2
      with:
        name: book-html
        path: website/book/
    - name: Mark artifacts as executable
      run: chmod +x website/bin/Audiobench_Linux_*
    - name: Deploy
      uses: JamesIves/github-pages-deploy-action@3.6.1
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        BRANCH: gh-pages
        FOLDER: website/
        CLEAN: true
