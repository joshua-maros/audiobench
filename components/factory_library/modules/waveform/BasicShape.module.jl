# Chosen by fair dice roll
# Guaranteed to be random
const NOISE_TABLE = [
    0.5823733057f0, 0.9205345657f0, 0.6571298125f0, 0.2043478687f0, 0.0512690046f0, 0.7195207713f0, 0.2310517188f0, 0.9231509820f0, 0.4526838440f0, 0.0260594523f0, 0.0544928862f0, 0.1159314989f0, 0.6362018928f0, 0.9405871960f0, 0.6264985620f0, 0.2124264443f0, 0.9875042798f0, 0.5048588941f0, 0.4584656122f0, 0.0476017861f0, 0.0288889159f0, 0.6630403250f0, 0.1075030279f0, 0.3067326273f0, 0.9282126274f0, 0.0489180574f0, 0.1897491045f0, 0.1516381450f0, 0.6479914077f0, 0.5966626517f0, 0.4706642329f0, 0.9586591313f0, 0.6251782560f0, 0.0076425701f0, 0.3360183227f0, 0.6176969668f0, 0.6220597604f0, 0.7335311112f0, 0.7775641042f0, 0.1995585811f0, 0.5877232887f0, 0.6093249228f0, 0.6400574417f0, 0.6418364406f0, 0.0491156122f0, 0.8943623489f0, 0.9641463493f0, 0.1186706294f0, 0.8703927354f0, 0.5001623698f0, 0.0056789845f0, 0.8819698228f0, 0.7906626464f0, 0.9055616444f0, 0.4516002782f0, 0.5868636653f0, 0.3968439417f0, 0.7977244927f0, 0.1008400526f0, 0.8151222552f0, 0.9223453225f0, 0.3447953142f0, 0.1643775846f0, 0.3701962001f0,
    0.8219128569f0, 0.1433063551f0, 0.1008244504f0, 0.2759908145f0, 0.3385794923f0, 0.3720992678f0, 0.5390982539f0, 0.4045148123f0, 0.3129078015f0, 0.0905247719f0, 0.3636522633f0, 0.1815615606f0, 0.5866425786f0, 0.3635969325f0, 0.7118137809f0, 0.9413958251f0, 0.8462901983f0, 0.7086461944f0, 0.2116179209f0, 0.9558813899f0, 0.7712728058f0, 0.7436435592f0, 0.1174792689f0, 0.4402326317f0, 0.3300473314f0, 0.7258179635f0, 0.6852669441f0, 0.8268835500f0, 0.9414339859f0, 0.9698785453f0, 0.2198778432f0, 0.4993178479f0, 0.9458775302f0, 0.4651419338f0, 0.9475727742f0, 0.7516902440f0, 0.5921997640f0, 0.5647117736f0, 0.3013841324f0, 0.6477727130f0, 0.3548120713f0, 0.6580563145f0, 0.4555038559f0, 0.1969513888f0, 0.3823855544f0, 0.4797867289f0, 0.6586882920f0, 0.8334892165f0, 0.6235895636f0, 0.9407863655f0, 0.0075790714f0, 0.6499866010f0, 0.6128024268f0, 0.3511917680f0, 0.7220454357f0, 0.0042356840f0, 0.4927558066f0, 0.3164420912f0, 0.8955885591f0, 0.3571066220f0, 0.4981550359f0, 0.0989912997f0, 0.3712778393f0, 0.3266162353f0,
    0.7478513378f0, 0.6276269444f0, 0.8296789683f0, 0.4610411459f0, 0.0314418181f0, 0.4869558270f0, 0.7031032450f0, 0.2127670626f0, 0.0680087881f0, 0.8889250267f0, 0.8341707040f0, 0.1246116881f0, 0.0000052800f0, 0.7495491208f0, 0.0503713413f0, 0.4544045378f0, 0.8691414718f0, 0.9367935365f0, 0.5428859015f0, 0.2169552000f0, 0.6843056289f0, 0.9442384416f0, 0.1008210213f0, 0.4999945500f0, 0.9061539286f0, 0.5784019420f0, 0.6173300311f0, 0.5558337790f0, 0.2850517636f0, 0.1011729350f0, 0.1542427349f0, 0.0508586863f0, 0.3768541338f0, 0.0972577220f0, 0.7144678479f0, 0.5576695303f0, 0.8094812596f0, 0.2209368912f0, 0.5436705058f0, 0.3966998104f0, 0.5256404117f0, 0.5910491356f0, 0.7311703302f0, 0.3424387399f0, 0.3120802337f0, 0.7003970577f0, 0.1556768013f0, 0.5504151494f0, 0.6198858838f0, 0.5639975408f0, 0.6005967693f0, 0.3505180292f0, 0.5527126085f0, 0.6887327524f0, 0.5782618174f0, 0.4792736810f0, 0.3127952238f0, 0.1107229101f0, 0.5514905204f0, 0.5568147747f0, 0.7904348876f0, 0.6297142275f0, 0.9969978076f0, 0.8145126198f0,
    0.0891614271f0, 0.6738798898f0, 0.2752702647f0, 0.0792932730f0, 0.4821553307f0, 0.5073550735f0, 0.5143602903f0, 0.8580102886f0, 0.9734973977f0, 0.6906858759f0, 0.0112051879f0, 0.4846233623f0, 0.5563355412f0, 0.6336978815f0, 0.4652177489f0, 0.5226450927f0, 0.8500987100f0, 0.5105837802f0, 0.9173687916f0, 0.4965466591f0, 0.0286197545f0, 0.6941339771f0, 0.6797021184f0, 0.1750842418f0, 0.2428437526f0, 0.7846603356f0, 0.4637142852f0, 0.5379670489f0, 0.4498315615f0, 0.2287200446f0, 0.6939706446f0, 0.1120059717f0, 0.5462369799f0, 0.4200930552f0, 0.9867872820f0, 0.5035517515f0, 0.0573214859f0, 0.8893057235f0, 0.0445228110f0, 0.4062884036f0, 0.2241242194f0, 0.0187810377f0, 0.5206151197f0, 0.3234116553f0, 0.4067530606f0, 0.4937472941f0, 0.4403010558f0, 0.1113067115f0, 0.0978618591f0, 0.4028492449f0, 0.8715409572f0, 0.7852228964f0, 0.3657251552f0, 0.9952221241f0, 0.0003066581f0, 0.0229128412f0, 0.1578300154f0, 0.6140684158f0, 0.7546029622f0, 0.2478871360f0, 0.2425992536f0, 0.6243580923f0, 0.8609598270f0, 0.7175909203f0,
] .* 2f0 .- 1f0;

function exec()
    waveform = function (phase::Float32, buffer_pos::Integer)
        parameter_here = parameter[1, buffer_pos]
        if choice == 0
            sin(phase * pi * 2)
        elseif choice == 1
            if phase < parameter_here 
                -1f0 
            else 
                1f0 
            end
        elseif choice == 2
            if phase < parameter_here 
                phase / parameter_here * 2f0 - 1f0
            else
                (1f0 - phase) / (1f0 - parameter_here) * 2f0 - 1f0
            end
        elseif choice == 3
            phase^exp(parameter_here * 8f0 - 4f0) * 2f0 - 1f0
        elseif choice == 4
            hphase = phase * 2f0 % 1f0
            unflipped = if hphase < parameter_here
                hphase / parameter_here
            else
                1f0
            end
            unflipped = unflipped * 2f0 - 1f0
            if phase >= 0.5f0
                -unflipped
            else
                unflipped
            end
        elseif choice == 5
            cos(Ï€ * (parameter_here * 6 + 1)^2 * phase^2)
        elseif choice == 6
            NOISE_TABLE[Int32(floor(phase * parameter_here * 255.9f0 + 1))]
        else
            @assert choice == 7
            num_steps = floor(parameter_here * 48 + 2)
            (phase - phase % (1f0 / num_steps)) * 2f0 - 1f0
        end
    end
end