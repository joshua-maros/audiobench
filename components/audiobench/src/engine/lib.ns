DATA_TYPE TRIGGER_BUFFER = [BUFFER_LENGTH]BOOL;
DATA_TYPE MONO_BUFFER = [BUFFER_LENGTH][1]FLOAT;
DATA_TYPE STEREO_BUFFER = [BUFFER_LENGTH][2]FLOAT;
DATA_TYPE ANY_AUDIO_BUFFER = <[BUFFER_LENGTH]FLOAT, STEREO_BUFFER>;
DATA_TYPE ANY_SAMPLE = <FLOAT, [2]FLOAT>;

TRIGGER_BUFFER global_release_trigger = FALSE as TRIGGER_BUFFER;
if global_note_status == 1.0 { global_release_trigger[0] = TRUE; }
TRIGGER_BUFFER global_start_trigger = FALSE as TRIGGER_BUFFER;
if global_note_status == 2.0 { global_start_trigger[0] = TRUE; }
BOOL global_update_feedback_data = global_should_update == 1.0;

macro FlatWaveform(INT buffer_pos, <[2]FLOAT> phase):(value) { <> value = 0.0; }
macro RampUpWaveform(INT buffer_pos, <[2]FLOAT> phase):(value) { <> value = phase * 2.0 - 1.0; }
macro RampDownWaveform(INT buffer_pos, <[2]FLOAT> phase):(value) { <> value = 1.0 - phase * 2.0; }
macro SineWaveform(INT buffer_pos, <[2]FLOAT> phase):(value) { <> value = Sin(phase * TAU); }

macro DisplayWaveform(MACRO UpdateFn, MACRO Waveform) {
    [44]FLOAT feedback;
    for i = 0 to 42 {
        FLOAT fphase = Itof(i) / 42.0;
        feedback[i] = Waveform(0, fphase)[0?];
    }
    feedback[42] = -1.0;
    feedback[43] = -1.0;
    UpdateFn(feedback);
}

macro DisplayWaveformWithCursor(MACRO UpdateFn, MACRO Waveform, FLOAT cursor_phase) {
    [44]FLOAT feedback;
    for i = 0 to 42 {
        FLOAT fphase = Itof(i) / 42.0;
        feedback[i] = Waveform(0, fphase)[0?];
    }
    feedback[42] = cursor_phase;
    feedback[43] = Waveform(0, cursor_phase)[0?];
    UpdateFn(feedback);
}

macro DisplayTriggerSequencePlayhead(MACRO UpdateFn, FLOAT position) {
    UpdateFn([position]);
}

macro DisplayValueSequenceData(MACRO UpdateFn, FLOAT playhead_position, FLOAT ramping_amount) {
    UpdateFn([playhead_position, ramping_amount]);
}

macro TimingModeUsesSongTime(INT mode):(flag) {
    BOOL flag = mode band 0b1 == 0b1;
}

macro TimingModeIsBeatSynchronized(INT mode):(flag) {
    BOOL flag = mode band 0b10 == 0b10;
}

macro GetTiming(INT mode):(timing) {
    BOOL SOURCE = mode band 0b1 == 0b1;
    BOOL TYPE = mode band 0b10 == 0b10;
    <MONO_BUFFER> timing;
    if !SOURCE and !TYPE {
        timing = global_note_time;
    } else if SOURCE and !TYPE {
        timing = global_elapsed_time;
    } else if !SOURCE and TYPE {
        timing = global_note_beats;
    } else if SOURCE and TYPE {
        timing = global_elapsed_beats;
    }
}

static lib_random_seed {
    // Chosen by fair dice roll, guaranteed to be random.
    INT lib_random_seed = 0x6b60c4e2;
}

// Based on https://en.wikipedia.org/wiki/Xorshift which is why it's called craprand.
// Basically I don't want to implement the features required to make a nicer random number
// generator. This one is fine for audio stuff.
macro CrapRand():(value) {
    // This line makes different notes have different "seeds" so they don't sound the same.
    // This might also break the period of the generator but I don't care.
    lib_random_seed = lib_random_seed + Ftoi(global_pitch + 60.0 * global_elapsed_time[0?]);
    lib_random_seed = lib_random_seed bxor lib_random_seed << 13;
    lib_random_seed = lib_random_seed bxor lib_random_seed >> 17;
    lib_random_seed = lib_random_seed bxor lib_random_seed << 5;
    FLOAT value = Itof(lib_random_seed) / Itof(0xFFFF_FFFF) * 2.0;
}
